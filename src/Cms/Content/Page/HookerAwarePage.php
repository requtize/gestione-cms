<?php

namespace Gestione\Cms\Content\Page;

use DateTime;
use Gestione\Component\I18n\LocaleInterface;
use Gestione\Component\Hooking\HookerInterface;

class HookerAwarePage extends Page implements PageInterface
{
    protected $hooker;

    public function __construct(HookerInterface $hooker)
    {
        $this->hooker = $hooker;
    }

    public static function fromPage(PageInterface $page, HookerInterface $hooker)
    {
        $resultPage = new self($hooker);

        $resultPage->setId($page->getId());
        $resultPage->setType($page->getType());
        $resultPage->setStatus($page->getStatus());
        $resultPage->setPublishedAt($page->getPublishedAt());
        $resultPage->setCreatedAt($page->getCreatedAt());
        $resultPage->setUpdatedAt($page->getUpdatedAt());
        $resultPage->setLocale($page->getLocale());
        $resultPage->setTitle($page->getTitle());
        $resultPage->setSlug($page->getSlug());
        $resultPage->setIntroduction($page->getIntroduction());
        $resultPage->setContent($page->getContent());
        $resultPage->setVisibility($page->getVisibility());
        $resultPage->setAutogeneratedLocale($page->getAutogeneratedLocale());

        return $resultPage;
    }

    protected function filter($value, $field)
    {
        return $this->hooker->doFilter('page.'.$field, $value, [ 'page' => $this ]);
    }

    public function getId(): string
    {
        return $this->filter($this->id, 'id');
    }

    public function getType()
    {
        return $this->filter($this->type, 'type');
    }

    public function getStatus()
    {
        return $this->filter($this->status, 'status');
    }

    public function getPublishedAt(): DateTime
    {
        return $this->filter($this->publishedAt, 'published_at');
    }

    public function getCreatedAt(): DateTime
    {
        return $this->filter($this->createdAt, 'created_at');
    }

    public function getUpdatedAt(): DateTime
    {
        return $this->filter($this->updatedAt, 'updated_at');
    }

    public function getLocale(): LocaleInterface
    {
        return $this->filter($this->locale, 'locale');
    }

    public function getTitle()
    {
        return $this->filter($this->title, 'title');
    }

    public function getSlug()
    {
        return $this->filter($this->slug, 'slug');
    }

    public function getIntroduction()
    {
        return $this->filter($this->introduction, 'introduction');
    }

    public function getContent()
    {
        return $this->filter($this->content, 'content');
    }

    public function getVisibility()
    {
        return $this->filter($this->visibility, 'visibility');
    }

    public function getAutogeneratedLocale()
    {
        return $this->filter($this->autogeneratedLocale, 'autogenerated_locale');
    }
}
