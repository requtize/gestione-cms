<?php

namespace Gestione\Cms\Content\Page;

use DateTime;
use RuntimeException;
use Gestione\Component\I18n\LocaleInterface;
use Gestione\Component\I18n\Locale;
use Gestione\Cms\Content\Page\Metadata\Metadata;

class Page implements PageInterface
{
    protected $id;
    protected $type;
    protected $status;
    protected $publishedAt;
    protected $createdAt;
    protected $updatedAt;
    protected $locale;
    protected $title;
    protected $slug;
    protected $introduction;
    protected $content;
    protected $visibility;
    protected $autogeneratedLocale;

    protected $fields = [
        'id' => 'id',
        'type' => 'type',
        'status' => 'status',
        'publishedAt' => 'published_at',
        'createdAt' => 'created_at',
        'updatedAt' => 'updated_at',
        'locale' => 'locale',
        'title' => 'title',
        'slug' => 'slug',
        'introduction' => 'introduction',
        'content' => 'content',
        'visibility' => 'visibility',
        'autogeneratedLocale' => 'autogenerated_locale',
    ];

    protected $metadata;

    public static function fromArray(array $data): PageInterface
    {
        $page = new self;

        if(isset($data['locale']) === false)
            $data['locale'] = new Locale('en_US');
        if(isset($data['published_at']) === false)
            $data['published_at'] = new DateTime('0000-00-00 00:00:00');
        if(isset($data['created_at']) === false)
            $data['created_at'] = new DateTime();
        if(isset($data['updated_at']) === false)
            $data['updated_at'] = new DateTime('0000-00-00 00:00:00');

        $page->setId($data['id']);
        $page->setType($data['type']);
        $page->setStatus($data['status']);
        $page->setPublishedAt($data['published_at'] instanceof DateTime ? $data['published_at'] : new DateTime($data['published_at']));
        $page->setCreatedAt($data['created_at'] instanceof DateTime ? $data['created_at'] : new DateTime($data['created_at']));
        $page->setUpdatedAt($data['updated_at'] instanceof DateTime ? $data['updated_at'] : new DateTime($data['updated_at']));
        $page->setLocale($data['locale'] instanceof LocaleInterface ? $data['locale'] : new Locale($data['locale']));
        $page->setTitle($data['title']);
        $page->setSlug($data['slug']);
        $page->setIntroduction($data['introduction']);
        $page->setContent($data['content']);
        $page->setVisibility($data['visibility']);
        $page->setAutogeneratedLocale($data['autogenerated_locale']);

        return $page;
    }

    public function toArray(): array
    {
        $result = [];

        foreach($this->fields as $key => $property)
        {
            $result[$key] = $this->{$property};
        }

        return $result;
    }

    public function setMetadata(Metadata $metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    public function getMetadata(): Metadata
    {
        $this->ensureMetadataSet();

        return $this->metadata;
    }

    public function getMeta(string $name, $default = null)
    {
        $this->ensureMetadataSet();

        return $this->metadata->get($name, $default);
    }

    public function setMeta(string $name, $value)
    {
        $this->ensureMetadataSet();

        return $this->metadata->set($name, $value);
    }

    public function hasMeta(string $name): bool
    {
        $this->ensureMetadataSet();

        return $this->metadata->has($name);
    }

    protected function ensureMetadataSet()
    {
        if($this->metadata === null)
        {
            throw new RuntimeException('No Metadata object was set in Page. Did You forget to setup page?');
        }
    }

    public function getId(): string
    {
        return $this->id;
    }

    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    public function getType()
    {
        return $this->type;
    }

    public function setType($type)
    {
        $this->type = $type;

        return $this;
    }

    public function getStatus()
    {
        return $this->status;
    }

    public function setStatus($status)
    {
        $this->status = $status;

        return $this;
    }

    public function getPublishedAt(): DateTime
    {
        return $this->publishedAt;
    }

    public function setPublishedAt(DateTime $publishedAt)
    {
        $this->publishedAt = $publishedAt;

        return $this;
    }

    public function getCreatedAt(): DateTime
    {
        return $this->createdAt;
    }

    public function setCreatedAt(DateTime $createdAt)
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    public function getUpdatedAt(): DateTime
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(DateTime $updatedAt)
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    public function getLocale(): LocaleInterface
    {
        return $this->locale;
    }

    public function setLocale(LocaleInterface $locale)
    {
        $this->locale = $locale;

        return $this;
    }

    public function getTitle()
    {
        return $this->title;
    }

    public function setTitle($title)
    {
        $this->title = $title;

        return $this;
    }

    public function getSlug()
    {
        return $this->slug;
    }

    public function setSlug($slug)
    {
        $this->slug = $slug;

        return $this;
    }

    public function getIntroduction()
    {
        return $this->introduction;
    }

    public function setIntroduction($introduction)
    {
        $this->introduction = $introduction;

        return $this;
    }

    public function getContent()
    {
        return $this->content;
    }

    public function setContent($content)
    {
        $this->content = $content;

        return $this;
    }

    public function getVisibility()
    {
        return $this->visibility;
    }

    public function setVisibility($visibility)
    {
        $this->visibility = $visibility;

        return $this;
    }

    public function getAutogeneratedLocale()
    {
        return $this->autogeneratedLocale;
    }

    public function setAutogeneratedLocale($autogeneratedLocale)
    {
        $this->autogeneratedLocale = (bool) $autogeneratedLocale;

        return $this;
    }
}
